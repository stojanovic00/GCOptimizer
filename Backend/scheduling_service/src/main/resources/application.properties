# GRPC
grpc.server.port:${SCHEDULING_SERVICE_PORT}

## Application
grpc.client.grpc-application-service.address=dns:///${APPLICATION_SERVICE_HOST}:${APPLICATION_SERVICE_PORT}
grpc.client.grpc-application-service.negotiationType=plaintext

# Opta
# The solver runs only for 5 seconds to avoid a HTTP timeout in this simple implementation.
# It's recommended to run for at least 5 minutes ("5m") otherwise.
optaplanner.solver.termination.spent-limit=5s

# Database
## Basic
spring.datasource.url=jdbc:postgresql://${SCHEDULING_DB_HOST}:${SCHEDULING_DB_PORT}/${SCHEDULING_DB_NAME}
spring.datasource.username=${SCHEDULING_DB_USER}
spring.datasource.password=${SCHEDULING_DB_PASS}

## Hibernate ddl auto (create, create-drop, validate, update)
spring.jpa.hibernate.ddl-auto=update
#spring.jpa.hibernate.ddl-auto=create-drop

## The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQL10Dialect

## Misc
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.sql.init.mode=always
spring.jpa.defer-datasource-initialization=true
# Show SQL queries
# spring.jpa.properties.hibernate.format_sql=true
# spring.jpa.show-sql = true