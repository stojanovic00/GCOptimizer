// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: scoring.proto

package scoring_pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Apparatus int32

const (
	Apparatus_Floor         Apparatus = 0
	Apparatus_PommelHorse   Apparatus = 1
	Apparatus_StillRings    Apparatus = 2
	Apparatus_Vault         Apparatus = 3
	Apparatus_ParallelBars  Apparatus = 4
	Apparatus_HorizontalBar Apparatus = 5
	Apparatus_BalanceBeam   Apparatus = 6
	Apparatus_UnevenBars    Apparatus = 7
)

// Enum value maps for Apparatus.
var (
	Apparatus_name = map[int32]string{
		0: "Floor",
		1: "PommelHorse",
		2: "StillRings",
		3: "Vault",
		4: "ParallelBars",
		5: "HorizontalBar",
		6: "BalanceBeam",
		7: "UnevenBars",
	}
	Apparatus_value = map[string]int32{
		"Floor":         0,
		"PommelHorse":   1,
		"StillRings":    2,
		"Vault":         3,
		"ParallelBars":  4,
		"HorizontalBar": 5,
		"BalanceBeam":   6,
		"UnevenBars":    7,
	}
)

func (x Apparatus) Enum() *Apparatus {
	p := new(Apparatus)
	*p = x
	return p
}

func (x Apparatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Apparatus) Descriptor() protoreflect.EnumDescriptor {
	return file_scoring_proto_enumTypes[0].Descriptor()
}

func (Apparatus) Type() protoreflect.EnumType {
	return &file_scoring_proto_enumTypes[0]
}

func (x Apparatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Apparatus.Descriptor instead.
func (Apparatus) EnumDescriptor() ([]byte, []int) {
	return file_scoring_proto_rawDescGZIP(), []int{0}
}

type JudgingPanelType int32

const (
	JudgingPanelType_EPanel JudgingPanelType = 0
	JudgingPanelType_DPanel JudgingPanelType = 1
)

// Enum value maps for JudgingPanelType.
var (
	JudgingPanelType_name = map[int32]string{
		0: "EPanel",
		1: "DPanel",
	}
	JudgingPanelType_value = map[string]int32{
		"EPanel": 0,
		"DPanel": 1,
	}
)

func (x JudgingPanelType) Enum() *JudgingPanelType {
	p := new(JudgingPanelType)
	*p = x
	return p
}

func (x JudgingPanelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JudgingPanelType) Descriptor() protoreflect.EnumDescriptor {
	return file_scoring_proto_enumTypes[1].Descriptor()
}

func (JudgingPanelType) Type() protoreflect.EnumType {
	return &file_scoring_proto_enumTypes[1]
}

func (x JudgingPanelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JudgingPanelType.Descriptor instead.
func (JudgingPanelType) EnumDescriptor() ([]byte, []int) {
	return file_scoring_proto_rawDescGZIP(), []int{1}
}

type LicenceType int32

const (
	LicenceType_National      LicenceType = 0
	LicenceType_International LicenceType = 1
)

// Enum value maps for LicenceType.
var (
	LicenceType_name = map[int32]string{
		0: "National",
		1: "International",
	}
	LicenceType_value = map[string]int32{
		"National":      0,
		"International": 1,
	}
)

func (x LicenceType) Enum() *LicenceType {
	p := new(LicenceType)
	*p = x
	return p
}

func (x LicenceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LicenceType) Descriptor() protoreflect.EnumDescriptor {
	return file_scoring_proto_enumTypes[2].Descriptor()
}

func (LicenceType) Type() protoreflect.EnumType {
	return &file_scoring_proto_enumTypes[2]
}

func (x LicenceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LicenceType.Descriptor instead.
func (LicenceType) EnumDescriptor() ([]byte, []int) {
	return file_scoring_proto_rawDescGZIP(), []int{2}
}

type ScoreType int32

const (
	ScoreType_D ScoreType = 0
	ScoreType_E ScoreType = 1
)

// Enum value maps for ScoreType.
var (
	ScoreType_name = map[int32]string{
		0: "D",
		1: "E",
	}
	ScoreType_value = map[string]int32{
		"D": 0,
		"E": 1,
	}
)

func (x ScoreType) Enum() *ScoreType {
	p := new(ScoreType)
	*p = x
	return p
}

func (x ScoreType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScoreType) Descriptor() protoreflect.EnumDescriptor {
	return file_scoring_proto_enumTypes[3].Descriptor()
}

func (ScoreType) Type() protoreflect.EnumType {
	return &file_scoring_proto_enumTypes[3]
}

func (x ScoreType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScoreType.Descriptor instead.
func (ScoreType) EnumDescriptor() ([]byte, []int) {
	return file_scoring_proto_rawDescGZIP(), []int{3}
}

type IdMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IdMessage) Reset() {
	*x = IdMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scoring_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdMessage) ProtoMessage() {}

func (x *IdMessage) ProtoReflect() protoreflect.Message {
	mi := &file_scoring_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdMessage.ProtoReflect.Descriptor instead.
func (*IdMessage) Descriptor() ([]byte, []int) {
	return file_scoring_proto_rawDescGZIP(), []int{0}
}

func (x *IdMessage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type EmptyMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyMessage) Reset() {
	*x = EmptyMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scoring_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyMessage) ProtoMessage() {}

func (x *EmptyMessage) ProtoReflect() protoreflect.Message {
	mi := &file_scoring_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyMessage.ProtoReflect.Descriptor instead.
func (*EmptyMessage) Descriptor() ([]byte, []int) {
	return file_scoring_proto_rawDescGZIP(), []int{1}
}

type ApparatusList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Apparatuses []Apparatus `protobuf:"varint,1,rep,packed,name=apparatuses,proto3,enum=scoring_pb.Apparatus" json:"apparatuses,omitempty"`
}

func (x *ApparatusList) Reset() {
	*x = ApparatusList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scoring_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApparatusList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApparatusList) ProtoMessage() {}

func (x *ApparatusList) ProtoReflect() protoreflect.Message {
	mi := &file_scoring_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApparatusList.ProtoReflect.Descriptor instead.
func (*ApparatusList) Descriptor() ([]byte, []int) {
	return file_scoring_proto_rawDescGZIP(), []int{2}
}

func (x *ApparatusList) GetApparatuses() []Apparatus {
	if x != nil {
		return x.Apparatuses
	}
	return nil
}

type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Country      string `protobuf:"bytes,2,opt,name=country,proto3" json:"country,omitempty"`
	City         string `protobuf:"bytes,3,opt,name=city,proto3" json:"city,omitempty"`
	Street       string `protobuf:"bytes,4,opt,name=street,proto3" json:"street,omitempty"`
	StreetNumber string `protobuf:"bytes,5,opt,name=streetNumber,proto3" json:"streetNumber,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scoring_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_scoring_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_scoring_proto_rawDescGZIP(), []int{3}
}

func (x *Address) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Address) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Address) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *Address) GetStreet() string {
	if x != nil {
		return x.Street
	}
	return ""
}

func (x *Address) GetStreetNumber() string {
	if x != nil {
		return x.StreetNumber
	}
	return ""
}

type SportsOrganization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                             string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                           string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Email                          string   `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	PhoneNumber                    string   `protobuf:"bytes,4,opt,name=phoneNumber,proto3" json:"phoneNumber,omitempty"`
	ContactPersonFullName          string   `protobuf:"bytes,5,opt,name=contactPersonFullName,proto3" json:"contactPersonFullName,omitempty"`
	CompetitionOrganisingPrivilege bool     `protobuf:"varint,6,opt,name=competitionOrganisingPrivilege,proto3" json:"competitionOrganisingPrivilege,omitempty"`
	Address                        *Address `protobuf:"bytes,7,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *SportsOrganization) Reset() {
	*x = SportsOrganization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scoring_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SportsOrganization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SportsOrganization) ProtoMessage() {}

func (x *SportsOrganization) ProtoReflect() protoreflect.Message {
	mi := &file_scoring_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SportsOrganization.ProtoReflect.Descriptor instead.
func (*SportsOrganization) Descriptor() ([]byte, []int) {
	return file_scoring_proto_rawDescGZIP(), []int{4}
}

func (x *SportsOrganization) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SportsOrganization) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SportsOrganization) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *SportsOrganization) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *SportsOrganization) GetContactPersonFullName() string {
	if x != nil {
		return x.ContactPersonFullName
	}
	return ""
}

func (x *SportsOrganization) GetCompetitionOrganisingPrivilege() bool {
	if x != nil {
		return x.CompetitionOrganisingPrivilege
	}
	return false
}

func (x *SportsOrganization) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

type Judge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	FullName           string              `protobuf:"bytes,2,opt,name=fullName,proto3" json:"fullName,omitempty"`
	Email              string              `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	LicenceType        LicenceType         `protobuf:"varint,4,opt,name=licenceType,proto3,enum=scoring_pb.LicenceType" json:"licenceType,omitempty"`
	LicenceName        string              `protobuf:"bytes,5,opt,name=licenceName,proto3" json:"licenceName,omitempty"`
	SportsOrganization *SportsOrganization `protobuf:"bytes,6,opt,name=sportsOrganization,proto3" json:"sportsOrganization,omitempty"` //  string panel = 6;
}

func (x *Judge) Reset() {
	*x = Judge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scoring_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Judge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Judge) ProtoMessage() {}

func (x *Judge) ProtoReflect() protoreflect.Message {
	mi := &file_scoring_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Judge.ProtoReflect.Descriptor instead.
func (*Judge) Descriptor() ([]byte, []int) {
	return file_scoring_proto_rawDescGZIP(), []int{5}
}

func (x *Judge) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Judge) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *Judge) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Judge) GetLicenceType() LicenceType {
	if x != nil {
		return x.LicenceType
	}
	return LicenceType_National
}

func (x *Judge) GetLicenceName() string {
	if x != nil {
		return x.LicenceName
	}
	return ""
}

func (x *Judge) GetSportsOrganization() *SportsOrganization {
	if x != nil {
		return x.SportsOrganization
	}
	return nil
}

type JudgeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Judges []*Judge `protobuf:"bytes,1,rep,name=judges,proto3" json:"judges,omitempty"`
}

func (x *JudgeList) Reset() {
	*x = JudgeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scoring_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JudgeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JudgeList) ProtoMessage() {}

func (x *JudgeList) ProtoReflect() protoreflect.Message {
	mi := &file_scoring_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JudgeList.ProtoReflect.Descriptor instead.
func (*JudgeList) Descriptor() ([]byte, []int) {
	return file_scoring_proto_rawDescGZIP(), []int{6}
}

func (x *JudgeList) GetJudges() []*Judge {
	if x != nil {
		return x.Judges
	}
	return nil
}

type ScoreCalculationMethod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ScoreDeductionNum int32  `protobuf:"varint,2,opt,name=ScoreDeductionNum,proto3" json:"ScoreDeductionNum,omitempty"`
}

func (x *ScoreCalculationMethod) Reset() {
	*x = ScoreCalculationMethod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scoring_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScoreCalculationMethod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScoreCalculationMethod) ProtoMessage() {}

func (x *ScoreCalculationMethod) ProtoReflect() protoreflect.Message {
	mi := &file_scoring_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScoreCalculationMethod.ProtoReflect.Descriptor instead.
func (*ScoreCalculationMethod) Descriptor() ([]byte, []int) {
	return file_scoring_proto_rawDescGZIP(), []int{7}
}

func (x *ScoreCalculationMethod) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ScoreCalculationMethod) GetScoreDeductionNum() int32 {
	if x != nil {
		return x.ScoreDeductionNum
	}
	return 0
}

type Contestant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CompetingId          int32               `protobuf:"varint,2,opt,name=competingId,proto3" json:"competingId,omitempty"`
	FullName             string              `protobuf:"bytes,3,opt,name=fullName,proto3" json:"fullName,omitempty"`
	SportsOrganization   *SportsOrganization `protobuf:"bytes,4,opt,name=sportsOrganization,proto3" json:"sportsOrganization,omitempty"`
	CompetingApparatuses []Apparatus         `protobuf:"varint,5,rep,packed,name=competingApparatuses,proto3,enum=scoring_pb.Apparatus" json:"competingApparatuses,omitempty"`
	TeamNumber           int32               `protobuf:"varint,6,opt,name=teamNumber,proto3" json:"teamNumber,omitempty"`
	AgeCategory          string              `protobuf:"bytes,7,opt,name=ageCategory,proto3" json:"ageCategory,omitempty"`
}

func (x *Contestant) Reset() {
	*x = Contestant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scoring_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contestant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contestant) ProtoMessage() {}

func (x *Contestant) ProtoReflect() protoreflect.Message {
	mi := &file_scoring_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contestant.ProtoReflect.Descriptor instead.
func (*Contestant) Descriptor() ([]byte, []int) {
	return file_scoring_proto_rawDescGZIP(), []int{8}
}

func (x *Contestant) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Contestant) GetCompetingId() int32 {
	if x != nil {
		return x.CompetingId
	}
	return 0
}

func (x *Contestant) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *Contestant) GetSportsOrganization() *SportsOrganization {
	if x != nil {
		return x.SportsOrganization
	}
	return nil
}

func (x *Contestant) GetCompetingApparatuses() []Apparatus {
	if x != nil {
		return x.CompetingApparatuses
	}
	return nil
}

func (x *Contestant) GetTeamNumber() int32 {
	if x != nil {
		return x.TeamNumber
	}
	return 0
}

func (x *Contestant) GetAgeCategory() string {
	if x != nil {
		return x.AgeCategory
	}
	return ""
}

type ContestantCompeting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contestant *Contestant `protobuf:"bytes,1,opt,name=contestant,proto3" json:"contestant,omitempty"`
	Competes   bool        `protobuf:"varint,2,opt,name=competes,proto3" json:"competes,omitempty"`
}

func (x *ContestantCompeting) Reset() {
	*x = ContestantCompeting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scoring_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContestantCompeting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContestantCompeting) ProtoMessage() {}

func (x *ContestantCompeting) ProtoReflect() protoreflect.Message {
	mi := &file_scoring_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContestantCompeting.ProtoReflect.Descriptor instead.
func (*ContestantCompeting) Descriptor() ([]byte, []int) {
	return file_scoring_proto_rawDescGZIP(), []int{9}
}

func (x *ContestantCompeting) GetContestant() *Contestant {
	if x != nil {
		return x.Contestant
	}
	return nil
}

func (x *ContestantCompeting) GetCompetes() bool {
	if x != nil {
		return x.Competes
	}
	return false
}

type ContestantList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contestants []*ContestantCompeting `protobuf:"bytes,1,rep,name=contestants,proto3" json:"contestants,omitempty"`
}

func (x *ContestantList) Reset() {
	*x = ContestantList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scoring_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContestantList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContestantList) ProtoMessage() {}

func (x *ContestantList) ProtoReflect() protoreflect.Message {
	mi := &file_scoring_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContestantList.ProtoReflect.Descriptor instead.
func (*ContestantList) Descriptor() ([]byte, []int) {
	return file_scoring_proto_rawDescGZIP(), []int{10}
}

func (x *ContestantList) GetContestants() []*ContestantCompeting {
	if x != nil {
		return x.Contestants
	}
	return nil
}

type TempScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type          ScoreType   `protobuf:"varint,2,opt,name=type,proto3,enum=scoring_pb.ScoreType" json:"type,omitempty"`
	Apparatus     Apparatus   `protobuf:"varint,3,opt,name=apparatus,proto3,enum=scoring_pb.Apparatus" json:"apparatus,omitempty"`
	Value         float32     `protobuf:"fixed32,4,opt,name=value,proto3" json:"value,omitempty"`
	Contestant    *Contestant `protobuf:"bytes,5,opt,name=contestant,proto3" json:"contestant,omitempty"`
	CompetitionId string      `protobuf:"bytes,6,opt,name=competitionId,proto3" json:"competitionId,omitempty"` //Too large to put whole message
	Judge         *Judge      `protobuf:"bytes,7,opt,name=judge,proto3" json:"judge,omitempty"`
}

func (x *TempScore) Reset() {
	*x = TempScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scoring_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TempScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TempScore) ProtoMessage() {}

func (x *TempScore) ProtoReflect() protoreflect.Message {
	mi := &file_scoring_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TempScore.ProtoReflect.Descriptor instead.
func (*TempScore) Descriptor() ([]byte, []int) {
	return file_scoring_proto_rawDescGZIP(), []int{11}
}

func (x *TempScore) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TempScore) GetType() ScoreType {
	if x != nil {
		return x.Type
	}
	return ScoreType_D
}

func (x *TempScore) GetApparatus() Apparatus {
	if x != nil {
		return x.Apparatus
	}
	return Apparatus_Floor
}

func (x *TempScore) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *TempScore) GetContestant() *Contestant {
	if x != nil {
		return x.Contestant
	}
	return nil
}

func (x *TempScore) GetCompetitionId() string {
	if x != nil {
		return x.CompetitionId
	}
	return ""
}

func (x *TempScore) GetJudge() *Judge {
	if x != nil {
		return x.Judge
	}
	return nil
}

type TempScoreList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TempScores []*TempScore `protobuf:"bytes,1,rep,name=tempScores,proto3" json:"tempScores,omitempty"`
}

func (x *TempScoreList) Reset() {
	*x = TempScoreList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scoring_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TempScoreList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TempScoreList) ProtoMessage() {}

func (x *TempScoreList) ProtoReflect() protoreflect.Message {
	mi := &file_scoring_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TempScoreList.ProtoReflect.Descriptor instead.
func (*TempScoreList) Descriptor() ([]byte, []int) {
	return file_scoring_proto_rawDescGZIP(), []int{12}
}

func (x *TempScoreList) GetTempScores() []*TempScore {
	if x != nil {
		return x.TempScores
	}
	return nil
}

type Score struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Apparatus     Apparatus   `protobuf:"varint,2,opt,name=apparatus,proto3,enum=scoring_pb.Apparatus" json:"apparatus,omitempty"`
	DScore        float32     `protobuf:"fixed32,3,opt,name=dScore,proto3" json:"dScore,omitempty"`
	EScore        float32     `protobuf:"fixed32,4,opt,name=eScore,proto3" json:"eScore,omitempty"`
	TotalScore    float32     `protobuf:"fixed32,5,opt,name=totalScore,proto3" json:"totalScore,omitempty"`
	CompetitionId string      `protobuf:"bytes,6,opt,name=competitionId,proto3" json:"competitionId,omitempty"`
	Contestant    *Contestant `protobuf:"bytes,7,opt,name=contestant,proto3" json:"contestant,omitempty"`
}

func (x *Score) Reset() {
	*x = Score{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scoring_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Score) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Score) ProtoMessage() {}

func (x *Score) ProtoReflect() protoreflect.Message {
	mi := &file_scoring_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Score.ProtoReflect.Descriptor instead.
func (*Score) Descriptor() ([]byte, []int) {
	return file_scoring_proto_rawDescGZIP(), []int{13}
}

func (x *Score) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Score) GetApparatus() Apparatus {
	if x != nil {
		return x.Apparatus
	}
	return Apparatus_Floor
}

func (x *Score) GetDScore() float32 {
	if x != nil {
		return x.DScore
	}
	return 0
}

func (x *Score) GetEScore() float32 {
	if x != nil {
		return x.EScore
	}
	return 0
}

func (x *Score) GetTotalScore() float32 {
	if x != nil {
		return x.TotalScore
	}
	return 0
}

func (x *Score) GetCompetitionId() string {
	if x != nil {
		return x.CompetitionId
	}
	return ""
}

func (x *Score) GetContestant() *Contestant {
	if x != nil {
		return x.Contestant
	}
	return nil
}

// DTOS
type CreateJudgingPanelsForApparatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Apparatus     Apparatus `protobuf:"varint,1,opt,name=apparatus,proto3,enum=scoring_pb.Apparatus" json:"apparatus,omitempty"`
	CompetitionId string    `protobuf:"bytes,2,opt,name=competitionId,proto3" json:"competitionId,omitempty"`
}

func (x *CreateJudgingPanelsForApparatusRequest) Reset() {
	*x = CreateJudgingPanelsForApparatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scoring_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateJudgingPanelsForApparatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateJudgingPanelsForApparatusRequest) ProtoMessage() {}

func (x *CreateJudgingPanelsForApparatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scoring_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateJudgingPanelsForApparatusRequest.ProtoReflect.Descriptor instead.
func (*CreateJudgingPanelsForApparatusRequest) Descriptor() ([]byte, []int) {
	return file_scoring_proto_rawDescGZIP(), []int{14}
}

func (x *CreateJudgingPanelsForApparatusRequest) GetApparatus() Apparatus {
	if x != nil {
		return x.Apparatus
	}
	return Apparatus_Floor
}

func (x *CreateJudgingPanelsForApparatusRequest) GetCompetitionId() string {
	if x != nil {
		return x.CompetitionId
	}
	return ""
}

type CreateJudgingPanelsForApparatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DPanelId string `protobuf:"bytes,1,opt,name=dPanelId,proto3" json:"dPanelId,omitempty"`
	EPanelId string `protobuf:"bytes,2,opt,name=ePanelId,proto3" json:"ePanelId,omitempty"`
}

func (x *CreateJudgingPanelsForApparatusResponse) Reset() {
	*x = CreateJudgingPanelsForApparatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scoring_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateJudgingPanelsForApparatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateJudgingPanelsForApparatusResponse) ProtoMessage() {}

func (x *CreateJudgingPanelsForApparatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scoring_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateJudgingPanelsForApparatusResponse.ProtoReflect.Descriptor instead.
func (*CreateJudgingPanelsForApparatusResponse) Descriptor() ([]byte, []int) {
	return file_scoring_proto_rawDescGZIP(), []int{15}
}

func (x *CreateJudgingPanelsForApparatusResponse) GetDPanelId() string {
	if x != nil {
		return x.DPanelId
	}
	return ""
}

func (x *CreateJudgingPanelsForApparatusResponse) GetEPanelId() string {
	if x != nil {
		return x.EPanelId
	}
	return ""
}

type AssignJudgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Judge   *Judge `protobuf:"bytes,1,opt,name=judge,proto3" json:"judge,omitempty"`
	PanelId string `protobuf:"bytes,2,opt,name=panelId,proto3" json:"panelId,omitempty"`
}

func (x *AssignJudgeRequest) Reset() {
	*x = AssignJudgeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scoring_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignJudgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignJudgeRequest) ProtoMessage() {}

func (x *AssignJudgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scoring_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignJudgeRequest.ProtoReflect.Descriptor instead.
func (*AssignJudgeRequest) Descriptor() ([]byte, []int) {
	return file_scoring_proto_rawDescGZIP(), []int{16}
}

func (x *AssignJudgeRequest) GetJudge() *Judge {
	if x != nil {
		return x.Judge
	}
	return nil
}

func (x *AssignJudgeRequest) GetPanelId() string {
	if x != nil {
		return x.PanelId
	}
	return ""
}

type AssignScoreCalculationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Method  *ScoreCalculationMethod `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	PanelId string                  `protobuf:"bytes,2,opt,name=panelId,proto3" json:"panelId,omitempty"`
}

func (x *AssignScoreCalculationRequest) Reset() {
	*x = AssignScoreCalculationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scoring_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignScoreCalculationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignScoreCalculationRequest) ProtoMessage() {}

func (x *AssignScoreCalculationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scoring_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignScoreCalculationRequest.ProtoReflect.Descriptor instead.
func (*AssignScoreCalculationRequest) Descriptor() ([]byte, []int) {
	return file_scoring_proto_rawDescGZIP(), []int{17}
}

func (x *AssignScoreCalculationRequest) GetMethod() *ScoreCalculationMethod {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *AssignScoreCalculationRequest) GetPanelId() string {
	if x != nil {
		return x.PanelId
	}
	return ""
}

type JudgeJudgingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Judge             *Judge                  `protobuf:"bytes,1,opt,name=judge,proto3" json:"judge,omitempty"`
	CompetitionId     string                  `protobuf:"bytes,2,opt,name=competitionId,proto3" json:"competitionId,omitempty"`
	Apparatus         Apparatus               `protobuf:"varint,3,opt,name=apparatus,proto3,enum=scoring_pb.Apparatus" json:"apparatus,omitempty"`
	JudgingPanelType  JudgingPanelType        `protobuf:"varint,4,opt,name=judgingPanelType,proto3,enum=scoring_pb.JudgingPanelType" json:"judgingPanelType,omitempty"`
	CalculationMethod *ScoreCalculationMethod `protobuf:"bytes,5,opt,name=calculationMethod,proto3" json:"calculationMethod,omitempty"`
}

func (x *JudgeJudgingInfo) Reset() {
	*x = JudgeJudgingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scoring_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JudgeJudgingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JudgeJudgingInfo) ProtoMessage() {}

func (x *JudgeJudgingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_scoring_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JudgeJudgingInfo.ProtoReflect.Descriptor instead.
func (*JudgeJudgingInfo) Descriptor() ([]byte, []int) {
	return file_scoring_proto_rawDescGZIP(), []int{18}
}

func (x *JudgeJudgingInfo) GetJudge() *Judge {
	if x != nil {
		return x.Judge
	}
	return nil
}

func (x *JudgeJudgingInfo) GetCompetitionId() string {
	if x != nil {
		return x.CompetitionId
	}
	return ""
}

func (x *JudgeJudgingInfo) GetApparatus() Apparatus {
	if x != nil {
		return x.Apparatus
	}
	return Apparatus_Floor
}

func (x *JudgeJudgingInfo) GetJudgingPanelType() JudgingPanelType {
	if x != nil {
		return x.JudgingPanelType
	}
	return JudgingPanelType_EPanel
}

func (x *JudgeJudgingInfo) GetCalculationMethod() *ScoreCalculationMethod {
	if x != nil {
		return x.CalculationMethod
	}
	return nil
}

type GetByApparatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompetitionId string    `protobuf:"bytes,1,opt,name=competitionId,proto3" json:"competitionId,omitempty"`
	Apparatus     Apparatus `protobuf:"varint,2,opt,name=apparatus,proto3,enum=scoring_pb.Apparatus" json:"apparatus,omitempty"`
}

func (x *GetByApparatusRequest) Reset() {
	*x = GetByApparatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scoring_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetByApparatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByApparatusRequest) ProtoMessage() {}

func (x *GetByApparatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scoring_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByApparatusRequest.ProtoReflect.Descriptor instead.
func (*GetByApparatusRequest) Descriptor() ([]byte, []int) {
	return file_scoring_proto_rawDescGZIP(), []int{19}
}

func (x *GetByApparatusRequest) GetCompetitionId() string {
	if x != nil {
		return x.CompetitionId
	}
	return ""
}

func (x *GetByApparatusRequest) GetApparatus() Apparatus {
	if x != nil {
		return x.Apparatus
	}
	return Apparatus_Floor
}

type ScoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompetitionId string    `protobuf:"bytes,1,opt,name=competitionId,proto3" json:"competitionId,omitempty"`
	ContestantId  string    `protobuf:"bytes,2,opt,name=contestantId,proto3" json:"contestantId,omitempty"`
	Apparatus     Apparatus `protobuf:"varint,3,opt,name=apparatus,proto3,enum=scoring_pb.Apparatus" json:"apparatus,omitempty"`
}

func (x *ScoreRequest) Reset() {
	*x = ScoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scoring_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScoreRequest) ProtoMessage() {}

func (x *ScoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scoring_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScoreRequest.ProtoReflect.Descriptor instead.
func (*ScoreRequest) Descriptor() ([]byte, []int) {
	return file_scoring_proto_rawDescGZIP(), []int{20}
}

func (x *ScoreRequest) GetCompetitionId() string {
	if x != nil {
		return x.CompetitionId
	}
	return ""
}

func (x *ScoreRequest) GetContestantId() string {
	if x != nil {
		return x.ContestantId
	}
	return ""
}

func (x *ScoreRequest) GetApparatus() Apparatus {
	if x != nil {
		return x.Apparatus
	}
	return Apparatus_Floor
}

var File_scoring_proto protoreflect.FileDescriptor

var file_scoring_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0a, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x62, 0x22, 0x1b, 0x0a, 0x09, 0x49,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x0e, 0x0a, 0x0c, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x48, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x61,
	0x72, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x0b, 0x61, 0x70, 0x70,
	0x61, 0x72, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x61,
	0x72, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x61, 0x72, 0x61, 0x74, 0x75, 0x73,
	0x65, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x72, 0x65, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x65,
	0x65, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x9d, 0x02, 0x0a, 0x12, 0x53, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x15, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x46, 0x75, 0x6c, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x46, 0x0a, 0x1e, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c,
	0x65, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x63, 0x6f, 0x6d, 0x70, 0x65,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xf6, 0x01, 0x0a, 0x05, 0x4a, 0x75, 0x64,
	0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x39, 0x0a, 0x0b, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x73, 0x63, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0b, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x4e, 0x0a, 0x12, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x62, 0x2e, 0x53, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x36, 0x0a, 0x09, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29,
	0x0a, 0x06, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x62, 0x2e, 0x4a, 0x75, 0x64, 0x67,
	0x65, 0x52, 0x06, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x73, 0x22, 0x56, 0x0a, 0x16, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x64, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75,
	0x6d, 0x22, 0xb7, 0x02, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4e,
	0x0a, 0x12, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x63, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x62, 0x2e, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49,
	0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x61, 0x72,
	0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x73,
	0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x61, 0x72, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x14, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x70,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x61,
	0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74,
	0x65, 0x61, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x67, 0x65,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x61, 0x67, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x69, 0x0a, 0x13, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x36, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f,
	0x6d, 0x70, 0x65, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x6f,
	0x6d, 0x70, 0x65, 0x74, 0x65, 0x73, 0x22, 0x53, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x22, 0x98, 0x02, 0x0a, 0x09,
	0x54, 0x65, 0x6d, 0x70, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x62, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x61, 0x72, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x61, 0x72, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09,
	0x61, 0x70, 0x70, 0x61, 0x72, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x36, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x65,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x27, 0x0a,
	0x05, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73,
	0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x62, 0x2e, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x52,
	0x05, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x22, 0x46, 0x0a, 0x0d, 0x54, 0x65, 0x6d, 0x70, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x63,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x62, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x22, 0xfa,
	0x01, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x61,
	0x72, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x73, 0x63,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x61, 0x72, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x09, 0x61, 0x70, 0x70, 0x61, 0x72, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x64,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x22, 0x83, 0x01, 0x0a, 0x26,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4a, 0x75, 0x64, 0x67, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x6e,
	0x65, 0x6c, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x61, 0x72, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x61, 0x72, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x73, 0x63, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x61, 0x72, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x09, 0x61, 0x70, 0x70, 0x61, 0x72, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x63,
	0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x22, 0x61, 0x0a, 0x27, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4a, 0x75, 0x64, 0x67, 0x69,
	0x6e, 0x67, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x61, 0x72,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x50, 0x61, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x50, 0x61, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x22, 0x57, 0x0a, 0x12, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x4a, 0x75,
	0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x6a, 0x75,
	0x64, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x63, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x62, 0x2e, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x52, 0x05, 0x6a, 0x75,
	0x64, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x75, 0x0a,
	0x1d, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a,
	0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x62, 0x2e, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x22, 0xb2, 0x02, 0x0a, 0x10, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x4a, 0x75,
	0x64, 0x67, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x0a, 0x05, 0x6a, 0x75, 0x64,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x62, 0x2e, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x52, 0x05, 0x6a, 0x75, 0x64,
	0x67, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x65,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x61,
	0x72, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x73, 0x63,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x61, 0x72, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x09, 0x61, 0x70, 0x70, 0x61, 0x72, 0x61, 0x74, 0x75, 0x73, 0x12, 0x48, 0x0a,
	0x10, 0x6a, 0x75, 0x64, 0x67, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x62, 0x2e, 0x4a, 0x75, 0x64, 0x67, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x6e, 0x65,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x6a, 0x75, 0x64, 0x67, 0x69, 0x6e, 0x67, 0x50, 0x61,
	0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x50, 0x0a, 0x11, 0x63, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x62, 0x2e,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x11, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x72, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x42, 0x79, 0x41, 0x70, 0x70, 0x61, 0x72, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x65,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x61,
	0x72, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x73, 0x63,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x61, 0x72, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x09, 0x61, 0x70, 0x70, 0x61, 0x72, 0x61, 0x74, 0x75, 0x73, 0x22, 0x8d, 0x01,
	0x0a, 0x0c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24,
	0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x61,
	0x72, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x73, 0x63,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x61, 0x72, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x09, 0x61, 0x70, 0x70, 0x61, 0x72, 0x61, 0x74, 0x75, 0x73, 0x2a, 0x88, 0x01,
	0x0a, 0x09, 0x41, 0x70, 0x70, 0x61, 0x72, 0x61, 0x74, 0x75, 0x73, 0x12, 0x09, 0x0a, 0x05, 0x46,
	0x6c, 0x6f, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x6f, 0x6d, 0x6d, 0x65, 0x6c,
	0x48, 0x6f, 0x72, 0x73, 0x65, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x74, 0x69, 0x6c, 0x6c,
	0x52, 0x69, 0x6e, 0x67, 0x73, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x61, 0x75, 0x6c, 0x74,
	0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x42, 0x61,
	0x72, 0x73, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74,
	0x61, 0x6c, 0x42, 0x61, 0x72, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x42, 0x65, 0x61, 0x6d, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x6e, 0x65, 0x76,
	0x65, 0x6e, 0x42, 0x61, 0x72, 0x73, 0x10, 0x07, 0x2a, 0x2a, 0x0a, 0x10, 0x4a, 0x75, 0x64, 0x67,
	0x69, 0x6e, 0x67, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06,
	0x45, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x50, 0x61, 0x6e,
	0x65, 0x6c, 0x10, 0x01, 0x2a, 0x2e, 0x0a, 0x0b, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x10,
	0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x10, 0x01, 0x2a, 0x19, 0x0a, 0x09, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x05, 0x0a, 0x01, 0x44, 0x10, 0x00, 0x12, 0x05, 0x0a, 0x01, 0x45, 0x10, 0x01, 0x32,
	0xd6, 0x08, 0x0a, 0x0e, 0x53, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x45, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x65,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x70, 0x62, 0x2e, 0x49, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x18, 0x2e,
	0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x1a, 0x47, 0x65, 0x74,
	0x41, 0x70, 0x70, 0x61, 0x72, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x6f,
	0x75, 0x74, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x12, 0x15, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x62, 0x2e, 0x49, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x19,
	0x2e, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x61,
	0x72, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x8c, 0x01, 0x0a, 0x1f,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4a, 0x75, 0x64, 0x67, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x6e,
	0x65, 0x6c, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x61, 0x72, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x32, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4a, 0x75, 0x64, 0x67, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x73,
	0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x61, 0x72, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x62,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4a, 0x75, 0x64, 0x67, 0x69, 0x6e, 0x67, 0x50, 0x61,
	0x6e, 0x65, 0x6c, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x61, 0x72, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0b, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x12, 0x1e, 0x2e, 0x73, 0x63, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x62, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x4a, 0x75, 0x64,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x63, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x73, 0x12, 0x15, 0x2e, 0x73, 0x63, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x62, 0x2e, 0x49, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x1a, 0x15, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x62, 0x2e, 0x4a,
	0x75, 0x64, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x16, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x62, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x18, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x18, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x62, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1c, 0x2e, 0x73, 0x63,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x62, 0x2e, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x4a, 0x75,
	0x64, 0x67, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x1e, 0x47,
	0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x61, 0x72, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x21, 0x2e,
	0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79,
	0x41, 0x70, 0x70, 0x61, 0x72, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1a, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x62, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x60,
	0x0a, 0x21, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x41, 0x70, 0x70, 0x61, 0x72, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x12, 0x21, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x41, 0x70, 0x70, 0x61, 0x72, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x22, 0x00,
	0x12, 0x44, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x15, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x62,
	0x2e, 0x54, 0x65, 0x6d, 0x70, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x18, 0x2e, 0x73, 0x63, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x73, 0x12, 0x18, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x62, 0x2e,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x73,
	0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x62, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0e, 0x43, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x18, 0x2e, 0x73, 0x63,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x62, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x62, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0b, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x11, 0x2e, 0x73, 0x63, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x62, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x18, 0x2e, 0x73,
	0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x42, 0x13, 0x5a, 0x11, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_scoring_proto_rawDescOnce sync.Once
	file_scoring_proto_rawDescData = file_scoring_proto_rawDesc
)

func file_scoring_proto_rawDescGZIP() []byte {
	file_scoring_proto_rawDescOnce.Do(func() {
		file_scoring_proto_rawDescData = protoimpl.X.CompressGZIP(file_scoring_proto_rawDescData)
	})
	return file_scoring_proto_rawDescData
}

var file_scoring_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_scoring_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_scoring_proto_goTypes = []interface{}{
	(Apparatus)(0),                                  // 0: scoring_pb.Apparatus
	(JudgingPanelType)(0),                           // 1: scoring_pb.JudgingPanelType
	(LicenceType)(0),                                // 2: scoring_pb.LicenceType
	(ScoreType)(0),                                  // 3: scoring_pb.ScoreType
	(*IdMessage)(nil),                               // 4: scoring_pb.IdMessage
	(*EmptyMessage)(nil),                            // 5: scoring_pb.EmptyMessage
	(*ApparatusList)(nil),                           // 6: scoring_pb.ApparatusList
	(*Address)(nil),                                 // 7: scoring_pb.Address
	(*SportsOrganization)(nil),                      // 8: scoring_pb.SportsOrganization
	(*Judge)(nil),                                   // 9: scoring_pb.Judge
	(*JudgeList)(nil),                               // 10: scoring_pb.JudgeList
	(*ScoreCalculationMethod)(nil),                  // 11: scoring_pb.ScoreCalculationMethod
	(*Contestant)(nil),                              // 12: scoring_pb.Contestant
	(*ContestantCompeting)(nil),                     // 13: scoring_pb.ContestantCompeting
	(*ContestantList)(nil),                          // 14: scoring_pb.ContestantList
	(*TempScore)(nil),                               // 15: scoring_pb.TempScore
	(*TempScoreList)(nil),                           // 16: scoring_pb.TempScoreList
	(*Score)(nil),                                   // 17: scoring_pb.Score
	(*CreateJudgingPanelsForApparatusRequest)(nil),  // 18: scoring_pb.CreateJudgingPanelsForApparatusRequest
	(*CreateJudgingPanelsForApparatusResponse)(nil), // 19: scoring_pb.CreateJudgingPanelsForApparatusResponse
	(*AssignJudgeRequest)(nil),                      // 20: scoring_pb.AssignJudgeRequest
	(*AssignScoreCalculationRequest)(nil),           // 21: scoring_pb.AssignScoreCalculationRequest
	(*JudgeJudgingInfo)(nil),                        // 22: scoring_pb.JudgeJudgingInfo
	(*GetByApparatusRequest)(nil),                   // 23: scoring_pb.GetByApparatusRequest
	(*ScoreRequest)(nil),                            // 24: scoring_pb.ScoreRequest
}
var file_scoring_proto_depIdxs = []int32{
	0,  // 0: scoring_pb.ApparatusList.apparatuses:type_name -> scoring_pb.Apparatus
	7,  // 1: scoring_pb.SportsOrganization.address:type_name -> scoring_pb.Address
	2,  // 2: scoring_pb.Judge.licenceType:type_name -> scoring_pb.LicenceType
	8,  // 3: scoring_pb.Judge.sportsOrganization:type_name -> scoring_pb.SportsOrganization
	9,  // 4: scoring_pb.JudgeList.judges:type_name -> scoring_pb.Judge
	8,  // 5: scoring_pb.Contestant.sportsOrganization:type_name -> scoring_pb.SportsOrganization
	0,  // 6: scoring_pb.Contestant.competingApparatuses:type_name -> scoring_pb.Apparatus
	12, // 7: scoring_pb.ContestantCompeting.contestant:type_name -> scoring_pb.Contestant
	13, // 8: scoring_pb.ContestantList.contestants:type_name -> scoring_pb.ContestantCompeting
	3,  // 9: scoring_pb.TempScore.type:type_name -> scoring_pb.ScoreType
	0,  // 10: scoring_pb.TempScore.apparatus:type_name -> scoring_pb.Apparatus
	12, // 11: scoring_pb.TempScore.contestant:type_name -> scoring_pb.Contestant
	9,  // 12: scoring_pb.TempScore.judge:type_name -> scoring_pb.Judge
	15, // 13: scoring_pb.TempScoreList.tempScores:type_name -> scoring_pb.TempScore
	0,  // 14: scoring_pb.Score.apparatus:type_name -> scoring_pb.Apparatus
	12, // 15: scoring_pb.Score.contestant:type_name -> scoring_pb.Contestant
	0,  // 16: scoring_pb.CreateJudgingPanelsForApparatusRequest.apparatus:type_name -> scoring_pb.Apparatus
	9,  // 17: scoring_pb.AssignJudgeRequest.judge:type_name -> scoring_pb.Judge
	11, // 18: scoring_pb.AssignScoreCalculationRequest.method:type_name -> scoring_pb.ScoreCalculationMethod
	9,  // 19: scoring_pb.JudgeJudgingInfo.judge:type_name -> scoring_pb.Judge
	0,  // 20: scoring_pb.JudgeJudgingInfo.apparatus:type_name -> scoring_pb.Apparatus
	1,  // 21: scoring_pb.JudgeJudgingInfo.judgingPanelType:type_name -> scoring_pb.JudgingPanelType
	11, // 22: scoring_pb.JudgeJudgingInfo.calculationMethod:type_name -> scoring_pb.ScoreCalculationMethod
	0,  // 23: scoring_pb.GetByApparatusRequest.apparatus:type_name -> scoring_pb.Apparatus
	0,  // 24: scoring_pb.ScoreRequest.apparatus:type_name -> scoring_pb.Apparatus
	4,  // 25: scoring_pb.ScoringService.StartCompetition:input_type -> scoring_pb.IdMessage
	4,  // 26: scoring_pb.ScoringService.GetApparatusesWithoutPanel:input_type -> scoring_pb.IdMessage
	18, // 27: scoring_pb.ScoringService.CreateJudgingPanelsForApparatus:input_type -> scoring_pb.CreateJudgingPanelsForApparatusRequest
	20, // 28: scoring_pb.ScoringService.AssignJudge:input_type -> scoring_pb.AssignJudgeRequest
	4,  // 29: scoring_pb.ScoringService.GetAssignedJudges:input_type -> scoring_pb.IdMessage
	21, // 30: scoring_pb.ScoringService.AssignScoreCalculation:input_type -> scoring_pb.AssignScoreCalculationRequest
	5,  // 31: scoring_pb.ScoringService.GetLoggedJudgeInfo:input_type -> scoring_pb.EmptyMessage
	23, // 32: scoring_pb.ScoringService.GetCurrentApparatusContestants:input_type -> scoring_pb.GetByApparatusRequest
	23, // 33: scoring_pb.ScoringService.GetNextCurrentApparatusContestant:input_type -> scoring_pb.GetByApparatusRequest
	15, // 34: scoring_pb.ScoringService.SubmitTempScore:input_type -> scoring_pb.TempScore
	24, // 35: scoring_pb.ScoringService.GetContestantsTempScores:input_type -> scoring_pb.ScoreRequest
	24, // 36: scoring_pb.ScoringService.CalculateScore:input_type -> scoring_pb.ScoreRequest
	17, // 37: scoring_pb.ScoringService.SubmitScore:input_type -> scoring_pb.Score
	5,  // 38: scoring_pb.ScoringService.StartCompetition:output_type -> scoring_pb.EmptyMessage
	6,  // 39: scoring_pb.ScoringService.GetApparatusesWithoutPanel:output_type -> scoring_pb.ApparatusList
	19, // 40: scoring_pb.ScoringService.CreateJudgingPanelsForApparatus:output_type -> scoring_pb.CreateJudgingPanelsForApparatusResponse
	5,  // 41: scoring_pb.ScoringService.AssignJudge:output_type -> scoring_pb.EmptyMessage
	10, // 42: scoring_pb.ScoringService.GetAssignedJudges:output_type -> scoring_pb.JudgeList
	5,  // 43: scoring_pb.ScoringService.AssignScoreCalculation:output_type -> scoring_pb.EmptyMessage
	22, // 44: scoring_pb.ScoringService.GetLoggedJudgeInfo:output_type -> scoring_pb.JudgeJudgingInfo
	14, // 45: scoring_pb.ScoringService.GetCurrentApparatusContestants:output_type -> scoring_pb.ContestantList
	12, // 46: scoring_pb.ScoringService.GetNextCurrentApparatusContestant:output_type -> scoring_pb.Contestant
	5,  // 47: scoring_pb.ScoringService.SubmitTempScore:output_type -> scoring_pb.EmptyMessage
	16, // 48: scoring_pb.ScoringService.GetContestantsTempScores:output_type -> scoring_pb.TempScoreList
	17, // 49: scoring_pb.ScoringService.CalculateScore:output_type -> scoring_pb.Score
	5,  // 50: scoring_pb.ScoringService.SubmitScore:output_type -> scoring_pb.EmptyMessage
	38, // [38:51] is the sub-list for method output_type
	25, // [25:38] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_scoring_proto_init() }
func file_scoring_proto_init() {
	if File_scoring_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_scoring_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scoring_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scoring_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApparatusList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scoring_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scoring_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SportsOrganization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scoring_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Judge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scoring_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JudgeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scoring_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScoreCalculationMethod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scoring_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contestant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scoring_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContestantCompeting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scoring_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContestantList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scoring_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TempScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scoring_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TempScoreList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scoring_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Score); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scoring_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateJudgingPanelsForApparatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scoring_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateJudgingPanelsForApparatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scoring_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignJudgeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scoring_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignScoreCalculationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scoring_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JudgeJudgingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scoring_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetByApparatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scoring_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_scoring_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_scoring_proto_goTypes,
		DependencyIndexes: file_scoring_proto_depIdxs,
		EnumInfos:         file_scoring_proto_enumTypes,
		MessageInfos:      file_scoring_proto_msgTypes,
	}.Build()
	File_scoring_proto = out.File
	file_scoring_proto_rawDesc = nil
	file_scoring_proto_goTypes = nil
	file_scoring_proto_depIdxs = nil
}
