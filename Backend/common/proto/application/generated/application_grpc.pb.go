// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: application.proto

package application_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApplicationServiceClient is the client API for ApplicationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApplicationServiceClient interface {
	// Sports organisation
	RegisterSportsOrganisation(ctx context.Context, in *SportsOrganisation, opts ...grpc.CallOption) (*IdMessage, error)
	GetLoggedSportsOrganisation(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*SportsOrganisation, error)
	// Delegation members
	RegisterJudge(ctx context.Context, in *Judge, opts ...grpc.CallOption) (*IdMessage, error)
	GetSportOrganisationJudges(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*JudgesList, error)
	RegisterContestant(ctx context.Context, in *Contestant, opts ...grpc.CallOption) (*IdMessage, error)
	GetSportOrganisationContestants(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*ContestantList, error)
	// Competition
	CreateCompetition(ctx context.Context, in *Competition, opts ...grpc.CallOption) (*IdMessage, error)
	GetAllCompetitions(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*CompetitionList, error)
	GetCompetitionById(ctx context.Context, in *IdMessage, opts ...grpc.CallOption) (*Competition, error)
	AddAgeCategory(ctx context.Context, in *AddAgeCategoryRequest, opts ...grpc.CallOption) (*IdMessage, error)
	AddDelegationMemberProposition(ctx context.Context, in *AddDelegationMemberPropositionRequest, opts ...grpc.CallOption) (*IdMessage, error)
}

type applicationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApplicationServiceClient(cc grpc.ClientConnInterface) ApplicationServiceClient {
	return &applicationServiceClient{cc}
}

func (c *applicationServiceClient) RegisterSportsOrganisation(ctx context.Context, in *SportsOrganisation, opts ...grpc.CallOption) (*IdMessage, error) {
	out := new(IdMessage)
	err := c.cc.Invoke(ctx, "/application_pb.ApplicationService/RegisterSportsOrganisation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) GetLoggedSportsOrganisation(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*SportsOrganisation, error) {
	out := new(SportsOrganisation)
	err := c.cc.Invoke(ctx, "/application_pb.ApplicationService/GetLoggedSportsOrganisation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) RegisterJudge(ctx context.Context, in *Judge, opts ...grpc.CallOption) (*IdMessage, error) {
	out := new(IdMessage)
	err := c.cc.Invoke(ctx, "/application_pb.ApplicationService/RegisterJudge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) GetSportOrganisationJudges(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*JudgesList, error) {
	out := new(JudgesList)
	err := c.cc.Invoke(ctx, "/application_pb.ApplicationService/GetSportOrganisationJudges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) RegisterContestant(ctx context.Context, in *Contestant, opts ...grpc.CallOption) (*IdMessage, error) {
	out := new(IdMessage)
	err := c.cc.Invoke(ctx, "/application_pb.ApplicationService/RegisterContestant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) GetSportOrganisationContestants(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*ContestantList, error) {
	out := new(ContestantList)
	err := c.cc.Invoke(ctx, "/application_pb.ApplicationService/GetSportOrganisationContestants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) CreateCompetition(ctx context.Context, in *Competition, opts ...grpc.CallOption) (*IdMessage, error) {
	out := new(IdMessage)
	err := c.cc.Invoke(ctx, "/application_pb.ApplicationService/CreateCompetition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) GetAllCompetitions(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*CompetitionList, error) {
	out := new(CompetitionList)
	err := c.cc.Invoke(ctx, "/application_pb.ApplicationService/GetAllCompetitions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) GetCompetitionById(ctx context.Context, in *IdMessage, opts ...grpc.CallOption) (*Competition, error) {
	out := new(Competition)
	err := c.cc.Invoke(ctx, "/application_pb.ApplicationService/GetCompetitionById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) AddAgeCategory(ctx context.Context, in *AddAgeCategoryRequest, opts ...grpc.CallOption) (*IdMessage, error) {
	out := new(IdMessage)
	err := c.cc.Invoke(ctx, "/application_pb.ApplicationService/AddAgeCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) AddDelegationMemberProposition(ctx context.Context, in *AddDelegationMemberPropositionRequest, opts ...grpc.CallOption) (*IdMessage, error) {
	out := new(IdMessage)
	err := c.cc.Invoke(ctx, "/application_pb.ApplicationService/AddDelegationMemberProposition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApplicationServiceServer is the server API for ApplicationService service.
// All implementations must embed UnimplementedApplicationServiceServer
// for forward compatibility
type ApplicationServiceServer interface {
	// Sports organisation
	RegisterSportsOrganisation(context.Context, *SportsOrganisation) (*IdMessage, error)
	GetLoggedSportsOrganisation(context.Context, *EmptyMessage) (*SportsOrganisation, error)
	// Delegation members
	RegisterJudge(context.Context, *Judge) (*IdMessage, error)
	GetSportOrganisationJudges(context.Context, *EmptyMessage) (*JudgesList, error)
	RegisterContestant(context.Context, *Contestant) (*IdMessage, error)
	GetSportOrganisationContestants(context.Context, *EmptyMessage) (*ContestantList, error)
	// Competition
	CreateCompetition(context.Context, *Competition) (*IdMessage, error)
	GetAllCompetitions(context.Context, *EmptyMessage) (*CompetitionList, error)
	GetCompetitionById(context.Context, *IdMessage) (*Competition, error)
	AddAgeCategory(context.Context, *AddAgeCategoryRequest) (*IdMessage, error)
	AddDelegationMemberProposition(context.Context, *AddDelegationMemberPropositionRequest) (*IdMessage, error)
	mustEmbedUnimplementedApplicationServiceServer()
}

// UnimplementedApplicationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedApplicationServiceServer struct {
}

func (UnimplementedApplicationServiceServer) RegisterSportsOrganisation(context.Context, *SportsOrganisation) (*IdMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterSportsOrganisation not implemented")
}
func (UnimplementedApplicationServiceServer) GetLoggedSportsOrganisation(context.Context, *EmptyMessage) (*SportsOrganisation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoggedSportsOrganisation not implemented")
}
func (UnimplementedApplicationServiceServer) RegisterJudge(context.Context, *Judge) (*IdMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterJudge not implemented")
}
func (UnimplementedApplicationServiceServer) GetSportOrganisationJudges(context.Context, *EmptyMessage) (*JudgesList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSportOrganisationJudges not implemented")
}
func (UnimplementedApplicationServiceServer) RegisterContestant(context.Context, *Contestant) (*IdMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterContestant not implemented")
}
func (UnimplementedApplicationServiceServer) GetSportOrganisationContestants(context.Context, *EmptyMessage) (*ContestantList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSportOrganisationContestants not implemented")
}
func (UnimplementedApplicationServiceServer) CreateCompetition(context.Context, *Competition) (*IdMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCompetition not implemented")
}
func (UnimplementedApplicationServiceServer) GetAllCompetitions(context.Context, *EmptyMessage) (*CompetitionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCompetitions not implemented")
}
func (UnimplementedApplicationServiceServer) GetCompetitionById(context.Context, *IdMessage) (*Competition, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompetitionById not implemented")
}
func (UnimplementedApplicationServiceServer) AddAgeCategory(context.Context, *AddAgeCategoryRequest) (*IdMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAgeCategory not implemented")
}
func (UnimplementedApplicationServiceServer) AddDelegationMemberProposition(context.Context, *AddDelegationMemberPropositionRequest) (*IdMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDelegationMemberProposition not implemented")
}
func (UnimplementedApplicationServiceServer) mustEmbedUnimplementedApplicationServiceServer() {}

// UnsafeApplicationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApplicationServiceServer will
// result in compilation errors.
type UnsafeApplicationServiceServer interface {
	mustEmbedUnimplementedApplicationServiceServer()
}

func RegisterApplicationServiceServer(s grpc.ServiceRegistrar, srv ApplicationServiceServer) {
	s.RegisterService(&ApplicationService_ServiceDesc, srv)
}

func _ApplicationService_RegisterSportsOrganisation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SportsOrganisation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).RegisterSportsOrganisation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application_pb.ApplicationService/RegisterSportsOrganisation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).RegisterSportsOrganisation(ctx, req.(*SportsOrganisation))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_GetLoggedSportsOrganisation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).GetLoggedSportsOrganisation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application_pb.ApplicationService/GetLoggedSportsOrganisation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).GetLoggedSportsOrganisation(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_RegisterJudge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Judge)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).RegisterJudge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application_pb.ApplicationService/RegisterJudge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).RegisterJudge(ctx, req.(*Judge))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_GetSportOrganisationJudges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).GetSportOrganisationJudges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application_pb.ApplicationService/GetSportOrganisationJudges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).GetSportOrganisationJudges(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_RegisterContestant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Contestant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).RegisterContestant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application_pb.ApplicationService/RegisterContestant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).RegisterContestant(ctx, req.(*Contestant))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_GetSportOrganisationContestants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).GetSportOrganisationContestants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application_pb.ApplicationService/GetSportOrganisationContestants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).GetSportOrganisationContestants(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_CreateCompetition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Competition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).CreateCompetition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application_pb.ApplicationService/CreateCompetition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).CreateCompetition(ctx, req.(*Competition))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_GetAllCompetitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).GetAllCompetitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application_pb.ApplicationService/GetAllCompetitions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).GetAllCompetitions(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_GetCompetitionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).GetCompetitionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application_pb.ApplicationService/GetCompetitionById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).GetCompetitionById(ctx, req.(*IdMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_AddAgeCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAgeCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).AddAgeCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application_pb.ApplicationService/AddAgeCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).AddAgeCategory(ctx, req.(*AddAgeCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_AddDelegationMemberProposition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDelegationMemberPropositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).AddDelegationMemberProposition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application_pb.ApplicationService/AddDelegationMemberProposition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).AddDelegationMemberProposition(ctx, req.(*AddDelegationMemberPropositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApplicationService_ServiceDesc is the grpc.ServiceDesc for ApplicationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApplicationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "application_pb.ApplicationService",
	HandlerType: (*ApplicationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterSportsOrganisation",
			Handler:    _ApplicationService_RegisterSportsOrganisation_Handler,
		},
		{
			MethodName: "GetLoggedSportsOrganisation",
			Handler:    _ApplicationService_GetLoggedSportsOrganisation_Handler,
		},
		{
			MethodName: "RegisterJudge",
			Handler:    _ApplicationService_RegisterJudge_Handler,
		},
		{
			MethodName: "GetSportOrganisationJudges",
			Handler:    _ApplicationService_GetSportOrganisationJudges_Handler,
		},
		{
			MethodName: "RegisterContestant",
			Handler:    _ApplicationService_RegisterContestant_Handler,
		},
		{
			MethodName: "GetSportOrganisationContestants",
			Handler:    _ApplicationService_GetSportOrganisationContestants_Handler,
		},
		{
			MethodName: "CreateCompetition",
			Handler:    _ApplicationService_CreateCompetition_Handler,
		},
		{
			MethodName: "GetAllCompetitions",
			Handler:    _ApplicationService_GetAllCompetitions_Handler,
		},
		{
			MethodName: "GetCompetitionById",
			Handler:    _ApplicationService_GetCompetitionById_Handler,
		},
		{
			MethodName: "AddAgeCategory",
			Handler:    _ApplicationService_AddAgeCategory_Handler,
		},
		{
			MethodName: "AddDelegationMemberProposition",
			Handler:    _ApplicationService_AddDelegationMemberProposition_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "application.proto",
}
