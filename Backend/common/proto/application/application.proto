syntax = "proto3";

option go_package = "common/application_pb";
package application_pb;

service ApplicationService{
  //Sports organisation
  rpc RegisterSportsOrganisation(SportsOrganisation) returns(IdMessage) {}
  rpc GetLoggedSportsOrganisation(EmptyMessage) returns(SportsOrganisation) {}
  rpc GetSportsOrganisationByName(GetSportsOrganisationByNameRequest) returns(SportsOrganisation) {}
  //Delegation members
  rpc RegisterJudge(Judge) returns(IdMessage);
  rpc GetSportOrganisationJudges(EmptyMessage) returns(JudgesList);
  rpc RegisterContestant(Contestant) returns(IdMessage);
  rpc GetSportOrganisationContestants(EmptyMessage) returns(ContestantList);
  //Competition
  rpc CreateCompetition(Competition) returns(IdMessage);
  rpc GetAllCompetitions(EmptyMessage) returns(CompetitionList);
  rpc GetCompetitionById(IdMessage) returns(Competition);
  rpc AddAgeCategory(AddAgeCategoryRequest) returns(IdMessage);
  rpc AddDelegationMemberProposition(AddDelegationMemberPropositionRequest) returns(IdMessage);

  rpc CreateJudgeApplication(CreateJudgeApplicationRequest) returns(IdMessage);
  rpc GetAllJudgeApplications(IdMessage) returns(JudgeApplicationList);
  rpc CreateContestantApplication(CreateContestantApplicationRequest) returns(IdMessage);
  rpc GetAllContestantApplications(IdMessage) returns(ContestantApplicationList);
}

message EmptyMessage{}

message IdMessage{
  string id = 1;
}

message Address{
  string id = 1;
  string country = 2;
  string city = 3;
  string street = 4;
  string streetNumber =5;
}
message SportsOrganisation{
  string id = 1;
  string name = 2;
  string email = 3;
  string phoneNumber = 4;
  string contactPersonFullName = 5;
  bool competitionOrganisingPrivilege = 6;
  Address address = 7;
}



enum Gender{
  Male = 0;
  Female = 1;
}
message DelegationMemberPosition {
  string id = 1;
  string name = 2;
}
message DelegationMember {
  string id = 1;
  string fullName = 2;
  string email = 3;
  Gender gender = 4;
  DelegationMemberPosition position = 5;
  string image = 6;
  SportsOrganisation sportsOrganisation = 7;
}

enum LicenceType{
  National  = 0;
  International = 1;
}

message Judge {
  DelegationMember delegationMember = 1;
  LicenceType licenceType = 2;
  string licenceName = 3;
}

message JudgesList{
  repeated Judge judges = 1;
}

message Contestant{
  DelegationMember delegationMember = 1;
  int64 dateOfBirth = 2;
}

message ContestantList{
  repeated Contestant contestants = 1;
}

enum CompetitionType{
  TeamFinals = 0;
  AllAroundFinals = 1;
  ApparatusFinals = 2;
  Qualifications = 3;
}

message DelegationMemberProposition{
  string id = 1;
  DelegationMemberPosition position = 2;
  int32 minNumber = 3;
  int32 maxNumber = 4;
}

message TeamComposition{
  string id = 1;
  int32 baseContestantNumber = 2;
  int32 bonusContestantNumber = 3;
  bool multiCategoryTeam = 4;
}

message AgeCategory{
  string id = 1;
  string name = 2;
  int32 minAge = 3;
  int32 maxAge = 4;
  Competition competition = 6;
}


message Competition{
  string id = 1;
  string name = 2;
  int64 startDate = 3;
  int64 endDate = 4;
  Gender gender = 5;
  CompetitionType type = 6;
  bool tiebreak = 7;
  Address address = 8;
  SportsOrganisation organizer = 9;
  repeated DelegationMemberProposition delegationMemberPropositions = 10;
  TeamComposition teamComposition = 11;
  repeated AgeCategory ageCategories = 12;
}

message CompetitionList{
 repeated Competition competitions = 1;
}

message JudgeApplication{
  string id = 1;
  Competition competition = 2;
  Judge judge = 3;
}


message JudgeApplicationList{
  repeated JudgeApplication judgeApplications = 1;
}

enum Apparatus{
    Floor = 0;
    PommelHorse = 1;
    StillRings = 2;
    Vault = 3;
    ParallelBars = 4;
    HorizontalBar = 5;
    BalanceBeam = 6;
    UnevenBars = 7;
}

message ApparatusAnnouncement{
  string id = 1;
  Apparatus apparatus = 2;
  ContestantApplication contestantApplication = 3;
}

message ContestantApplication{
  string id = 1;
  int32 teamNumber = 2;
  Competition competition = 3;
  Contestant contestant = 4;
  AgeCategory ageCategory = 5;
  repeated ApparatusAnnouncement apparatusAnnouncements = 6;
}

message ContestantApplicationList{
  repeated ContestantApplication contestantApplications = 1;
}

// Requests
message  AddAgeCategoryRequest{
AgeCategory ageCategory = 1;
string competitionId = 2;
}

message  AddDelegationMemberPropositionRequest{
  DelegationMemberProposition delegationMemberProposition = 1;
  string competitionId = 2;
}

message CreateJudgeApplicationRequest{
  string judgeId = 1;
  string competitionId = 2;
}

message CreateContestantApplicationRequest{
  int32 teamNumber = 2;
  string competitionId = 3;
  string contestantId = 4;
  string ageCategoryId = 5;
  repeated ApparatusAnnouncement apparatusAnnouncements = 6;
}

message GetSportsOrganisationByNameRequest{
  string name = 1;
}